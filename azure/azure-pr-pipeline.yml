name: "$(SourceBranchName)+$(BuildID)"

trigger: none
pr: none

resources:
  repositories:
    - repository: common
      type: github
      name: NHSDigital/api-management-utils
      ref: refs/heads/edge
      endpoint: NHSDigital
  pipelines:
  - pipeline: build_pipeline
    source: "Spine-Directory-Service-Build"
    trigger:
      branches:
        exclude:
          - master
          - refs/heads/master
          - refs/tags/v*

pool:
  name: 'AWS-ECS'

variables:
  - template: project.yml

extends:
  template: azure/common/apigee-deployment.yml@common
  parameters:
    service_name: ${{ variables.service_name }}
    service_base_path: ${{ variables.service_base_path }}
    short_service_name: ${{ variables.short_service_name }}
    product_display_name: ${{ variables.product_display_name }}
    product_description: ${{ variables.product_description }}
    spec_file: ${{ variables.spec_file }}
    portal_api_requires_callback_url: false
    make_spec_visible: true
    deploy_review_sandbox: true
    secret_ids:
      - ptl/cis/ldap.nis1.national.ncrs.nhs.uk/key
      - ptl/cis/ldap.nis1.national.ncrs.nhs.uk/crt
      - ptl/veit07.devspineservices.nhs.uk/root-ca/crt
    config_ids:
      - /ptl/api-deployment/sds/ldap/private-key
      - /ptl/api-deployment/sds/ldap/client-cert
      - /ptl/api-deployment/sds/ldap/ca-certs
    apigee_deployments:
      - environment: internal-dev
        make_spec_visible: true
      - environment: internal-dev-sandbox
        proxy_path: sandbox
    post_deploy:
      - bash: |
          # Poll deploying API until our deployed version matches the release version
          url="https://$APIGEE_ENVIRONMENT.api.service.nhs.uk/$SERVICE_BASE_PATH/_status"
          interval_in_seconds=5
          releaseCommit="$(Build.SourceVersion)"
          printf "\nPolling %s every %s seconds, until commit is: %s\n" "$url" "$interval_in_seconds" "$releaseCommit"
          attempts=0
          success=0
          until [ $attempts -eq 60 ]
          do
          responseData=$(curl -H "apiKey: $(status-endpoint-api-key)" "$url" -s)
          deployedCommit=$(echo "$responseData" | jq -r ".commitId")
          if [ "$deployedCommit" == "$releaseCommit" ]; then
              success=1
              break;
          fi;
          ((attempts=attempts+1))
          sleep $interval_in_seconds;
          done
          if [ $success == 0 ]
          then
              echo "API was not ready in time"
              exit 255
          fi
        displayName: Wait for API to be available
